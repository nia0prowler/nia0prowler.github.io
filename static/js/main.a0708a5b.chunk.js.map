{"version":3,"sources":["components/Input/index.tsx","components/Links/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextInput","_ref","id","placeholder","value","onChange","React","createElement","className","required","type","Links","target","href","src","alt","PUBLIC_KEY","App","loadingSubscribe","setLoadingSubscribe","useState","loadingPush","setLoadingPush","pushId","setPushId","message","setMessage","title","setTitle","subscribeId","setSubscribeId","showSubscribe","setShowSubscribe","qrCode","useMemo","qr","QRCode","content","window","location","ecl","QRSvg","fill","cornerBlocksAsCircles","size","radiusFactor","cornerBlockRadiusFactor","roundOuterCorners","roundInnerCorners","svg","getSubscription","useSubscribe","publicKey","onSubmitSubscribe","useCallback","async","e","preventDefault","subscription","axios","post","toast","success","console","warn","error","onSubmitPush","setState","useEffect","FingerprintJS","load","then","fp","get","result","visitorId","dangerouslySetInnerHTML","__html","concat","onClick","onShowSubscribe","onShowPush","onSubmit","Toaster","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a0708a5b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TextInput = ({\n                       id,\n                       placeholder,\n                       value,\n                       onChange\n                   }: { id: string, placeholder: string, value: string, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) => (\n    <div className=\"field\">\n        <input id={id} placeholder={placeholder} value={value} onChange={onChange} required type=\"text\"/>\n    </div>\n);\n\nexport default TextInput\n","import React from 'react'\n\nconst Links = () => {\n    return <div className=\"links\">\n        <a className=\"links-item\" target=\"_blank\" href=\"https://github.com/u4aew/react-pwa-push-notifications\">\n            <img src=\"data:image/svg+xml;base64, PHN2ZyB3aWR0aD0iMTAyNCIgaGVpZ2h0PSIxMDI0IiB2aWV3Qm94PSIwIDAgMTAyNCAxMDI0IiBmaWxsPSJub25lIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgo8cGF0aCBmaWxsLXJ1bGU9ImV2ZW5vZGQiIGNsaXAtcnVsZT0iZXZlbm9kZCIgZD0iTTggMEMzLjU4IDAgMCAzLjU4IDAgOEMwIDExLjU0IDIuMjkgMTQuNTMgNS40NyAxNS41OUM1Ljg3IDE1LjY2IDYuMDIgMTUuNDIgNi4wMiAxNS4yMUM2LjAyIDE1LjAyIDYuMDEgMTQuMzkgNi4wMSAxMy43MkM0IDE0LjA5IDMuNDggMTMuMjMgMy4zMiAxMi43OEMzLjIzIDEyLjU1IDIuODQgMTEuODQgMi41IDExLjY1QzIuMjIgMTEuNSAxLjgyIDExLjEzIDIuNDkgMTEuMTJDMy4xMiAxMS4xMSAzLjU3IDExLjcgMy43MiAxMS45NEM0LjQ0IDEzLjE1IDUuNTkgMTIuODEgNi4wNSAxMi42QzYuMTIgMTIuMDggNi4zMyAxMS43MyA2LjU2IDExLjUzQzQuNzggMTEuMzMgMi45MiAxMC42NCAyLjkyIDcuNThDMi45MiA2LjcxIDMuMjMgNS45OSAzLjc0IDUuNDNDMy42NiA1LjIzIDMuMzggNC40MSAzLjgyIDMuMzFDMy44MiAzLjMxIDQuNDkgMy4xIDYuMDIgNC4xM0M2LjY2IDMuOTUgNy4zNCAzLjg2IDguMDIgMy44NkM4LjcgMy44NiA5LjM4IDMuOTUgMTAuMDIgNC4xM0MxMS41NSAzLjA5IDEyLjIyIDMuMzEgMTIuMjIgMy4zMUMxMi42NiA0LjQxIDEyLjM4IDUuMjMgMTIuMyA1LjQzQzEyLjgxIDUuOTkgMTMuMTIgNi43IDEzLjEyIDcuNThDMTMuMTIgMTAuNjUgMTEuMjUgMTEuMzMgOS40NyAxMS41M0M5Ljc2IDExLjc4IDEwLjAxIDEyLjI2IDEwLjAxIDEzLjAxQzEwLjAxIDE0LjA4IDEwIDE0Ljk0IDEwIDE1LjIxQzEwIDE1LjQyIDEwLjE1IDE1LjY3IDEwLjU1IDE1LjU5QzEzLjcxIDE0LjUzIDE2IDExLjUzIDE2IDhDMTYgMy41OCAxMi40MiAwIDggMFoiIHRyYW5zZm9ybT0ic2NhbGUoNjQpIiBmaWxsPSIjMUIxRjIzIi8+Cjwvc3ZnPgo=\" alt=\"\"/>\n        </a>\n        <a className=\"links-item\" target=\"_blank\" href=\"https://www.npmjs.com/package/react-pwa-push-notifications?activeTab=readme#usage\">\n            <img src=\"data:image/svg+xml;base64, PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+DQo8c3ZnIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4PSIwcHgiIHk9IjBweCIgd2lkdGg9IjU0MHB4IiBoZWlnaHQ9IjIxMHB4IiB2aWV3Qm94PSIwIDAgMTggNyI+DQo8cGF0aCBmaWxsPSIjQ0IzODM3IiBkPSJNMCwwaDE4djZIOXYxSDVWNkgwVjB6IE0xLDVoMlYyaDF2M2gxVjFIMVY1eiBNNiwxdjVoMlY1aDJWMUg2eiBNOCwyaDF2Mkg4VjJ6IE0xMSwxdjRoMlYyaDF2M2gxVjJoMXYzaDFWMUgxMXoiLz4NCjxwb2x5Z29uIGZpbGw9IiNGRkZGRkYiIHBvaW50cz0iMSw1IDMsNSAzLDIgNCwyIDQsNSA1LDUgNSwxIDEsMSAiLz4NCjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik02LDF2NWgyVjVoMlYxSDZ6IE05LDRIOFYyaDFWNHoiLz4NCjxwb2x5Z29uIGZpbGw9IiNGRkZGRkYiIHBvaW50cz0iMTEsMSAxMSw1IDEzLDUgMTMsMiAxNCwyIDE0LDUgMTUsNSAxNSwyIDE2LDIgMTYsNSAxNyw1IDE3LDEgIi8+DQo8L3N2Zz4NCg==\" alt=\"\"/>\n        </a>\n    </div>\n}\n\nexport default Links\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport {useSubscribe} from \"react-pwa-push-notifications\";\nimport toast, {Toaster} from 'react-hot-toast';\nimport TextInput from \"./components/Input\";\nimport axios from \"axios\";\nimport Links from \"./components/Links\";\nimport { QRCode, QRSvg } from 'sexy-qr';\n\n// in PROD use from .env\nconst PUBLIC_KEY = 'BDZJSiMXSJUhryPkjFh_H84ZeEjVNfq5STCXVDEW4bpXye1mybGCjufRFIVmMxJN1wHOGUunGyBra0qvSa0fGJ8';\n\nfunction App() {\n    const [loadingSubscribe, setLoadingSubscribe] = useState<boolean>(false)\n    const [loadingPush, setLoadingPush] = useState<boolean>(false)\n    const [pushId, setPushId] = useState<string>('');\n    const [message, setMessage] = useState<string>('World');\n    const [title, setTitle] = useState<string>('Hello');\n    const [subscribeId, setSubscribeId] = useState<string>('');\n    const [showSubscribe, setShowSubscribe] = useState<boolean>(true)\n\n    const onShowSubscribe = () => {\n        setShowSubscribe(true)\n    }\n    const onShowPush = () => {\n        setShowSubscribe(false)\n    }\n\n\n    const qrCode = useMemo(() => {\n        const qr =  new QRCode({\n            content: window.location.href,\n            ecl: 'M'\n        });\n        return new QRSvg(qr, {\n            fill: '#182026',\n            cornerBlocksAsCircles: true,\n            size: 200,\n            radiusFactor: 0.75,\n            cornerBlockRadiusFactor: 2,\n            roundOuterCorners: true,\n            roundInnerCorners: true,\n        }).svg\n    }, [])\n\n    const { getSubscription } = useSubscribe({publicKey: PUBLIC_KEY});\n\n    const onSubmitSubscribe = useCallback(async (e: React.FormEvent) => {\n        e.preventDefault();\n        setLoadingSubscribe(true)\n        try {\n            const subscription = await getSubscription();\n            await axios.post('/api/subscribe', {\n                subscription: subscription,\n                id: subscribeId\n            })\n            toast.success('Subscribe success');\n        } catch (e) {\n            console.warn(e);\n            toast.error('Details console');\n        } finally {\n            setLoadingSubscribe(false)\n        }\n    }, [getSubscription]);\n\n    const onSubmitPush = useCallback(async (e: React.FormEvent) => {\n        e.preventDefault();\n        setLoadingPush(true)\n        try {\n            await axios.post('/api/send', {\n                message,\n                title,\n                id: pushId\n            })\n            toast.success('Push success');\n        } catch (e) {\n            toast.error('Details console');\n        } finally {\n            setLoadingPush(false)\n        }\n    }, [pushId, message, title]);\n\n    const onChange = useCallback((setState: React.Dispatch<React.SetStateAction<string>>) => (e: React.ChangeEvent<HTMLInputElement>) => {\n        setState(e.target.value);\n    }, []);\n\n    useEffect(() => {\n        FingerprintJS.load()\n            .then(fp => fp.get())\n            .then(result => {\n                setSubscribeId(result.visitorId)\n                setPushId(result.visitorId)\n            });\n    }, []);\n\n\n    return (\n        <div className=\"App\">\n            <main>\n                <div>\n                    <div className=\"message\">\n                        <div className=\"title\"> Use as PWA</div>\n                        <div>\n                            You need to install the site on your home screen.\n                            Subscribe to push notifications.\n                            Then you can test sending notifications.\n                        </div>\n                    </div>\n                    <div className={'qrCode'} dangerouslySetInnerHTML={{ __html: qrCode }} />\n                </div>\n                <div className=\"tabs\">\n                    <div className={`tab-item`}>\n                        <button className={`tab ${showSubscribe ? 'active' : ''}`} onClick={onShowSubscribe}>Subscribe</button>\n                    </div>\n                    <div className={`tab-item`}>\n                        <button className={`tab ${!showSubscribe ? 'active' : ''}`} onClick={onShowPush}>Push</button>\n                    </div>\n                </div>\n                {!showSubscribe && <div className=\"send\">\n                    <form onSubmit={onSubmitPush}>\n                        <div className=\"title\">Notification</div>\n                        <TextInput id=\"idSubscribe\" placeholder=\"id\" value={pushId}\n                                   onChange={onChange(setPushId)}/>\n                        <TextInput id=\"title\" placeholder=\"title\" value={title} onChange={onChange(setTitle)}/>\n                        <TextInput id=\"message\" placeholder=\"message\" value={message} onChange={onChange(setMessage)}/>\n                        <button className={loadingPush ? 'loading' : ''}  type=\"submit\">Send</button>\n                    </form>\n                </div>}\n                {showSubscribe &&  <div className=\"send\">\n                    <form onSubmit={onSubmitSubscribe}>\n                        <div className=\"title\">Your Id</div>\n                        <TextInput id=\"fingerprint\" placeholder=\"Your id\" value={subscribeId}\n                                   onChange={onChange(setSubscribeId)}/>\n                        <button className={loadingSubscribe ? 'loading' : ''} type=\"submit\">Send</button>\n                    </form>\n                </div> }\n                <div>\n                    <Links />\n                </div>\n            </main>\n            <Toaster/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}